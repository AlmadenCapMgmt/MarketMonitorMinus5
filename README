# Market Drop Monitor Smart Contract

A Solidity smart contract that monitors the S&P 500 and Dow Jones Industrial Average for significant daily price drops (5% or more) and emits blockchain events for automated trading systems, DeFi protocols, or market alert applications.

## 🎯 Features

- **Real-time Market Monitoring**: Tracks S&P 500 and Dow Jones using Chainlink price feeds
- **Automated Drop Detection**: Emits events when markets drop 5% or more in a single trading day
- **Decentralized Data**: Uses Chainlink oracles for reliable, tamper-proof price data
- **Gas Optimized**: Only emits one event per market per day to minimize costs
- **Owner Controls**: Administrative functions for contract management
- **Historical Tracking**: Maintains daily price data and drop event history

## 💡 Why Use This Monitor?

### Traditional Finance Meets DeFi

Traditional markets often lack real-time, programmable alerts for significant events. This smart contract bridges that gap by bringing institutional-grade market monitoring to the blockchain, enabling automated responses to major market movements.

### Automated Risk Management

**Portfolio Protection**: Automatically trigger stop-losses, liquidations, or hedge positions when major indices drop significantly. No need to constantly monitor markets or rely on centralized alert services.

**Institutional Applications**:

- **Hedge Funds**: Implement systematic risk-off strategies when market volatility spikes
- **DeFi Protocols**: Adjust lending parameters or collateral requirements during market stress
- **Insurance Protocols**: Trigger coverage evaluations for market-based insurance products

### Decentralized Market Infrastructure

**Censorship Resistant**: Unlike traditional financial data APIs that can be restricted or manipulated, this contract uses decentralized Chainlink oracles, ensuring data integrity and availability.

**Composability**: Other smart contracts can easily integrate with this monitor to build complex financial products like:

- Volatility derivatives that activate during market stress
- Automated rebalancing protocols for portfolio management
- Social trading platforms that copy institutional risk management

### Real-World Use Cases

**🚨 Crisis Alpha Strategies**: Automatically execute contrarian trades or safe-haven asset purchases when markets panic

**📊 Volatility Products**: Power options protocols, VIX-like instruments, or volatility swaps that respond to equity market stress

**🏦 Lending Protocol Risk Controls**: Automatically increase collateral requirements or pause lending when systemic risk increases

**⚖️ Prediction Markets**: Settle bets or predictions about market performance objectively and transparently

**📱 DeFi Notifications**: Build mobile apps or Discord bots that alert users to major market events without relying on Web2 APIs

### Advantages Over Traditional Solutions

|Traditional Approach                 |Smart Contract Monitor               |
|-------------------------------------|-------------------------------------|
|Centralized APIs (potential downtime)|Decentralized Chainlink oracles      |
|Manual monitoring required           |Fully automated event emission       |
|Requires constant subscription fees  |One-time deployment cost             |
|Limited programmability              |Full smart contract integration      |
|Single points of failure             |Distributed blockchain infrastructure|
|Geographic restrictions possible     |Global accessibility                 |

The blockchain’s immutable event log also provides a permanent, auditable record of all major market drops - valuable for backtesting strategies, compliance reporting, and academic research.

## 📋 Prerequisites

- Node.js (v16 or higher)
- Hardhat or Truffle development environment
- MetaMask or similar Web3 wallet
- ETH for gas fees (mainnet) or testnet ETH

## 🚀 Quick Start

### 1. Installation

```bash
npm install @chainlink/contracts
npm install @openzeppelin/contracts
```

### 2. Deploy the Contract

```solidity
// Deploy to Ethereum mainnet or testnet
MarketDropMonitor monitor = new MarketDropMonitor();
```

### 3. Initialize Daily Tracking

```solidity
// Call at market open (9:30 AM EST)
monitor.initializeDailyTracking("SP500");
monitor.initializeDailyTracking("DOW");
```

### 4. Monitor Throughout the Day

```solidity
// Update prices periodically (every 15-30 minutes recommended)
monitor.updatePrice("SP500");
monitor.updatePrice("DOW");
```

## 📊 Contract Functions

### Core Functions

|Function                                 |Description                               |Access|
|-----------------------------------------|------------------------------------------|------|
|`initializeDailyTracking(string market)` |Sets opening price for the day            |Public|
|`updatePrice(string market)`             |Updates current price and checks for drops|Public|
|`getLatestPrice(string market)`          |Fetches current price from Chainlink      |Public|
|`getCurrentDropPercentage(string market)`|Returns current day’s percentage change   |Public|

### View Functions

|Function                                 |Description                   |Returns                                                  |
|-----------------------------------------|------------------------------|---------------------------------------------------------|
|`getDailyPriceData(string market)`       |Gets complete daily price data|`(openPrice, currentPrice, lastUpdate, dropEventEmitted)`|
|`getCurrentDropPercentage(string market)`|Current percentage change     |Percentage in basis points                               |

### Owner Functions

|Function                                      |Description                    |Access    |
|----------------------------------------------|-------------------------------|----------|
|`resetDailyTracking(string market)`           |Resets daily data (for testing)|Owner Only|
|`updatePriceFeed(string market, address feed)`|Updates Chainlink feed address |Owner Only|
|`transferOwnership(address newOwner)`         |Transfers contract ownership   |Owner Only|

## 🔔 Events

### MarketDrop Event

Emitted when a market drops 5% or more:

```solidity
event MarketDrop(
    string indexed market,     // "SP500" or "DOW"
    int256 openPrice,         // Day's opening price
    int256 currentPrice,      // Current price when drop occurred
    int256 dropPercentage,    // Percentage drop (basis points)
    uint256 timestamp         // Block timestamp
);
```

### PriceUpdate Event

Emitted on each price update:

```solidity
event PriceUpdate(
    string indexed market,    // Market identifier
    int256 price,            // Updated price
    uint256 timestamp        // Block timestamp
);
```

## 🛠 Configuration

### Supported Markets

- **SP500**: S&P 500 Index
- **DOW**: Dow Jones Industrial Average

### Chainlink Price Feeds

|Market   |Mainnet Address                             |Network |
|---------|--------------------------------------------|--------|
|S&P 500  |`0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419`|Ethereum|
|Dow Jones|*To be configured*                          |Ethereum|

### Thresholds

- **Drop Threshold**: -5.00% (-500 basis points)
- **Update Frequency**: Recommended every 15-30 minutes during trading hours
- **Daily Reset**: Automatic after 24 hours

## 📈 Usage Examples

### Basic Monitoring Setup

```javascript
// Web3.js example
const contract = new web3.eth.Contract(ABI, contractAddress);

// Initialize at market open
await contract.methods.initializeDailyTracking("SP500").send({from: account});

// Set up periodic updates
setInterval(async () => {
    await contract.methods.updatePrice("SP500").send({from: account});
}, 15 * 60 * 1000); // Every 15 minutes
```

### Listening for Drop Events

```javascript
// Listen for MarketDrop events
contract.events.MarketDrop({
    fromBlock: 'latest'
})
.on('data', (event) => {
    const { market, openPrice, currentPrice, dropPercentage } = event.returnValues;
    console.log(`🚨 MARKET ALERT: ${market} dropped ${dropPercentage/100}%`);
    console.log(`Open: ${openPrice}, Current: ${currentPrice}`);
    
    // Trigger your automated responses here
    triggerTradingStrategy(market, dropPercentage);
});
```

### Integration with DeFi Protocols

```solidity
// Example: Automated liquidation trigger
contract AutoLiquidator {
    MarketDropMonitor public monitor;
    
    function checkMarketConditions() external {
        int256 spDrop = monitor.getCurrentDropPercentage("SP500");
        if (spDrop <= -500) { // -5% or worse
            // Execute liquidation logic
            liquidatePositions();
        }
    }
}
```

## ⚠️ Important Considerations

### Gas Costs

- Initialization: ~50,000 gas
- Price updates: ~30,000-60,000 gas
- Event emission: Additional ~20,000 gas

### Trading Hours

- Markets are open Monday-Friday, 9:30 AM - 4:00 PM EST
- Initialize tracking at market open
- Stop updates after market close to save gas

### Price Feed Reliability

- Chainlink feeds update based on price deviation and time thresholds
- Always check feed freshness in production applications
- Consider implementing circuit breakers for extreme market conditions

## 🧪 Testing

### Local Testing

```bash
# Run local tests
npx hardhat test

# Deploy to local network
npx hardhat run scripts/deploy.js --network localhost
```

### Testnet Deployment

```bash
# Deploy to Goerli testnet
npx hardhat run scripts/deploy.js --network goerli
```

### Mainnet Deployment

```bash
# Deploy to Ethereum mainnet
npx hardhat run scripts/deploy.js --network mainnet
```

## 🛡️ Security Considerations

- **Oracle Risk**: Dependent on Chainlink price feed reliability
- **Access Control**: Only owner can modify critical parameters
- **Reentrancy**: No external calls in state-changing functions
- **Integer Overflow**: Uses Solidity 0.8+ built-in protections

## 📄 License

MIT License - see LICENSE file for details

## 🤝 Contributing

1. Fork the repository
1. Create a feature branch
1. Add tests for new functionality
1. Submit a pull request

## 📞 Support

- Issues: Create a GitHub issue
- Documentation: Check the `/docs` folder
- Community: Join our Discord server

## 🔗 Links

- [Chainlink Price Feeds](https://docs.chain.link/data-feeds/price-feeds/addresses)
- [Hardhat Documentation](https://hardhat.org/docs)
- [OpenZeppelin Contracts](https://docs.openzeppelin.com/contracts)

-----

**⚠️ Disclaimer**: This contract is for educational and development purposes. Test thoroughly before using in production. Market data and trading decisions carry inherent risks.
